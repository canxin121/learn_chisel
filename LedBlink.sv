// Generated by CIRCT firtool-1.62.1
module Counter(
  input  clock,
         reset,
  output full
);

  reg [31:0] counter;
  always @(posedge clock) begin
    if (reset)
      counter <= 32'h0;
    else if (&counter)
      counter <= 32'h0;
    else
      counter <= counter + 32'h1;
  end // always @(posedge)
  assign full = &counter;
endmodule

module Flip(
  input  clock,
         reset,
         in,
  output out
);

  reg reg_0;
  always @(posedge clock) begin
    if (reset)
      reg_0 <= 1'h0;
    else
      reg_0 <= in ^ reg_0;
  end // always @(posedge)
  assign out = reg_0;
endmodule

module LedBlink(
  input  clock,
         reset,
  output out
);

  wire _counterInst_full;
  Counter counterInst (
    .clock (clock),
    .reset (reset),
    .full  (_counterInst_full)
  );
  Flip flipInst (
    .clock (clock),
    .reset (reset),
    .in    (_counterInst_full),
    .out   (out)
  );
endmodule

