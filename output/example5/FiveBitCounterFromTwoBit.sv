// Generated by CIRCT firtool-1.62.1
module ParamCounter(
  input        clock,
               reset,
               io_enable,
  output [1:0] io_count,
  output       io_carry
);

  reg  [1:0] cntReg;
  wire       io_carry_0 = (&cntReg) & io_enable;
  always @(posedge clock) begin
    if (reset)
      cntReg <= 2'h0;
    else if (io_enable) begin
      if (io_carry_0)
        cntReg <= 2'h0;
      else
        cntReg <= cntReg + 2'h1;
    end
  end // always @(posedge)
  assign io_count = cntReg;
  assign io_carry = io_carry_0;
endmodule

module FiveBitCounterFromTwoBit(
  input        clock,
               reset,
  output [4:0] io_count
);

  wire [1:0] _cnt2_io_count;
  wire [1:0] _cnt1_io_count;
  wire       _cnt1_io_carry;
  wire [1:0] _cnt0_io_count;
  wire       _cnt0_io_carry;
  ParamCounter cnt0 (
    .clock     (clock),
    .reset     (reset),
    .io_enable (1'h1),
    .io_count  (_cnt0_io_count),
    .io_carry  (_cnt0_io_carry)
  );
  ParamCounter cnt1 (
    .clock     (clock),
    .reset     (reset),
    .io_enable (_cnt0_io_carry),
    .io_count  (_cnt1_io_count),
    .io_carry  (_cnt1_io_carry)
  );
  ParamCounter cnt2 (
    .clock     (clock),
    .reset     (reset),
    .io_enable (_cnt1_io_carry),
    .io_count  (_cnt2_io_count),
    .io_carry  (/* unused */)
  );
  assign io_count = {_cnt2_io_count[0], _cnt1_io_count, _cnt0_io_count};
endmodule

