// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
`ifdef PRINTF_COND
`define PRINTF_COND_ (`PRINTF_COND)
`else  // PRINTF_COND
`define PRINTF_COND_ 1
`endif  // PRINTF_COND
`endif  // not def PRINTF_COND_

module Counter (
    input  clock,
    reset,
    output full
);

  reg [31:0] counter;
  always @(posedge clock) begin
    if (reset) counter <= 32'h0;
    else if (&counter) counter <= 32'h0;
    else counter <= counter + 32'h1;
  end  // always @(posedge)
  assign full = &counter;
endmodule

module Flip (
    input  clock,
    reset,
    in,
    output out
);

  reg reg_0;
  always @(posedge clock) begin
    if (reset) reg_0 <= 1'h0;
    else reg_0 <= in ^ reg_0;
  end  // always @(posedge)
  assign out = reg_0;
endmodule

module LedBlink (
    input  clock,
    reset,
    output out
);

  wire _counterInst_full;
  Counter counterInst (
      .clock(clock),
      .reset(reset),
      .full (_counterInst_full)
  );
  Flip flipInst (
      .clock(clock),
      .reset(reset),
      .in   (_counterInst_full),
      .out  (out)
  );
endmodule

module LedBlinkTb (
    input clock,
    reset
);

  wire       _dut_out;
  reg  [9:0] cycleCount;
`ifndef SYNTHESIS
  always @(posedge clock) begin
    if ((`PRINTF_COND_) & cycleCount == 10'h0 & ~reset)
      $fwrite(32'h80000002, "Start LED Blink Test\n");
  end  // always @(posedge)
`endif  // not def SYNTHESIS
  always @(posedge clock) begin
    if (~reset) begin
      cover__cover : cover (_dut_out);
      cover__cover_1 : cover (~_dut_out);
    end
    if (reset) cycleCount <= 10'h0;
    else if (cycleCount == 10'h3E7) cycleCount <= 10'h0;
    else cycleCount <= cycleCount + 10'h1;
  end  // always @(posedge)
  LedBlink dut (
      .clock(clock),
      .reset(reset),
      .out  (_dut_out)
  );
endmodule

module LedBlinkTb_top;
  // 信号定义
  reg clock = 0;
  reg reset = 1;

  // 实例化生成的测试模块
  LedBlinkTb tb_inst (
      .clock(clock),
      .reset(reset)
  );

  // 时钟生成 (100MHz)
  always #5 clock = ~clock;

  // 仿真控制
  initial begin
    // 波形捕获
    $dumpfile("LedBlink_wave.vcd");
    $dumpvars(0, LedBlinkTb_top);

    // 复位序列
    reset = 1;
    repeat (10) @(posedge clock);
    reset = 0;

    // 运行仿真 - 注意：实际上32位计数器需要非常长时间才会溢出
    // 这里我们只模拟一段时间用于演示
    repeat (10000) @(posedge clock);

    $display("Simulation completed");
    $finish;
  end
endmodule
