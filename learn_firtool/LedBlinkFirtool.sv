// Generated by CIRCT firtool-1.110.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module Counter(	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
  input  clock,	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
         reset,	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
  output io_full	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:8:14
);

  reg [7:0] counter;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:12:24
  always @(posedge clock) begin	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
    if (reset)	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
      counter <= 8'h0;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:12:24
    else	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
      counter <= (&counter) ? 8'h0 : counter + 8'h1;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:12:24, :16:23, :18:28, :19:13, :21:{13,24}
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
    `ifdef FIRRTL_BEFORE_INITIAL	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
      `FIRRTL_BEFORE_INITIAL	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
      automatic logic [31:0] _RANDOM[0:0];	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
      `ifdef INIT_RANDOM_PROLOG_	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
        `INIT_RANDOM_PROLOG_	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
        counter = _RANDOM[/*Zero width*/ 1'b0][7:0];	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7, :12:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
      `FIRRTL_AFTER_INITIAL	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_full = &counter;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:7:7, :12:24, :16:23
endmodule

module Flip(	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
  input  clock,	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
         reset,	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
         io_in,	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:26:14
  output io_out	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:26:14
);

  reg reg_0;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:31:20
  always @(posedge clock) begin	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
    if (reset)	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
      reg_0 <= 1'h0;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7, :31:20
    else	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
      reg_0 <= io_in ^ reg_0;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:31:20, :35:15, :36:9
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
    `ifdef FIRRTL_BEFORE_INITIAL	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
      `FIRRTL_BEFORE_INITIAL	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
      automatic logic [31:0] _RANDOM[0:0];	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
      `ifdef INIT_RANDOM_PROLOG_	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
        `INIT_RANDOM_PROLOG_	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
        reg_0 = _RANDOM[/*Zero width*/ 1'b0][0];	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7, :31:20
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
      `FIRRTL_AFTER_INITIAL	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out = reg_0;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:25:7, :31:20
endmodule

module LedBlink(	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:41:7
  input  clock,	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:41:7
         reset,	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:41:7
  output io_out	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:42:14
);

  wire _flipInst_io_out;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:47:24
  wire _counterInst_io_full;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:46:27
  Counter counterInst (	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:46:27
    .clock   (clock),
    .reset   (reset),
    .io_full (_counterInst_io_full)
  );	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:46:27
  Flip flipInst (	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:47:24
    .clock  (clock),
    .reset  (reset),
    .io_in  (_counterInst_io_full),	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:46:27
    .io_out (_flipInst_io_out)
  );	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:47:24
  assign io_out = _flipInst_io_out;	// home/canxin/Documents/fpga/learn_chisel/src/main/scala/example1.scala:41:7, :47:24
endmodule

