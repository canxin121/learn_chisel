module attributes {circt.loweringOptions = "verifLabels"} {
  sv.macro.decl @SYNTHESIS
  sv.macro.decl @VERILATOR
  emit.fragment @RANDOM_INIT_FRAGMENT {
    sv.verbatim "// Standard header to adapt well known macros for register randomization."
    sv.verbatim "\0A// RANDOM may be set to an expression that produces a 32-bit random unsigned value."
    sv.ifdef  @RANDOM {
    } else {
      sv.macro.def @RANDOM "$random"
    }
    sv.verbatim "\0A// Users can define INIT_RANDOM as general code that gets injected into the\0A// initializer block for modules with registers."
    sv.ifdef  @INIT_RANDOM {
    } else {
      sv.macro.def @INIT_RANDOM ""
    }
    sv.verbatim "\0A// If using random initialization, you can also define RANDOMIZE_DELAY to\0A// customize the delay used, otherwise 0.002 is used."
    sv.ifdef  @RANDOMIZE_DELAY {
    } else {
      sv.macro.def @RANDOMIZE_DELAY "0.002"
    }
    sv.verbatim "\0A// Define INIT_RANDOM_PROLOG_ for use in our modules below."
    sv.ifdef  @INIT_RANDOM_PROLOG_ {
    } else {
      sv.ifdef  @RANDOMIZE {
        sv.ifdef  @VERILATOR {
          sv.macro.def @INIT_RANDOM_PROLOG_ "`INIT_RANDOM"
        } else {
          sv.macro.def @INIT_RANDOM_PROLOG_ "`INIT_RANDOM #`RANDOMIZE_DELAY begin end"
        }
      } else {
        sv.macro.def @INIT_RANDOM_PROLOG_ ""
      }
    }
  }
  emit.fragment @RANDOM_INIT_REG_FRAGMENT {
    sv.verbatim "\0A// Include register initializers in init blocks unless synthesis is set"
    sv.ifdef  @RANDOMIZE {
    } else {
      sv.ifdef  @RANDOMIZE_REG_INIT {
        sv.macro.def @RANDOMIZE ""
      }
    }
    sv.ifdef  @SYNTHESIS {
    } else {
      sv.ifdef  @ENABLE_INITIAL_REG_ {
      } else {
        sv.macro.def @ENABLE_INITIAL_REG_ ""
      }
    }
    sv.verbatim ""
  }
  sv.macro.decl @ENABLE_INITIAL_REG_
  sv.macro.decl @ENABLE_INITIAL_MEM_
  sv.macro.decl @FIRRTL_BEFORE_INITIAL
  sv.macro.decl @FIRRTL_AFTER_INITIAL
  sv.macro.decl @RANDOMIZE_REG_INIT
  sv.macro.decl @RANDOMIZE
  sv.macro.decl @RANDOMIZE_DELAY
  sv.macro.decl @RANDOM
  sv.macro.decl @INIT_RANDOM
  sv.macro.decl @INIT_RANDOM_PROLOG_
  hw.module private @Counter(in %clock : i1, in %reset : i1, out io_full : i1) attributes {emit.fragments = [@RANDOM_INIT_REG_FRAGMENT, @RANDOM_INIT_FRAGMENT]} {
    %c0_i0 = hw.constant 0 : i0
    %false = hw.constant false
    %c1_i8 = hw.constant 1 : i8
    %c-1_i8 = hw.constant -1 : i8
    %c0_i8 = hw.constant 0 : i8
    %counter = sv.reg : !hw.inout<i8> 
    %0 = sv.read_inout %counter : !hw.inout<i8>
    %1 = comb.icmp bin eq %0, %c-1_i8 {sv.namehint = "_io_full_T"} : i8
    %2 = comb.add bin %0, %c1_i8 {sv.namehint = "_counter_T"} : i8
    %3 = comb.mux bin %1, %c0_i8, %2 : i8
    sv.always posedge %clock {
      sv.if %reset {
        sv.passign %counter, %c0_i8 : i8
      } else {
        sv.passign %counter, %3 : i8
      }
    }
    sv.ifdef  @ENABLE_INITIAL_REG_ {
      sv.ordered {
        sv.ifdef  @FIRRTL_BEFORE_INITIAL {
          sv.verbatim "`FIRRTL_BEFORE_INITIAL"
        }
        sv.initial {
          sv.ifdef.procedural  @INIT_RANDOM_PROLOG_ {
            sv.verbatim "`INIT_RANDOM_PROLOG_"
          }
          sv.ifdef.procedural  @RANDOMIZE_REG_INIT {
            %_RANDOM = sv.logic : !hw.inout<uarray<1xi32>>
            %RANDOM = sv.macro.ref.expr.se @RANDOM() : () -> i32
            %4 = comb.extract %false from 0 : (i1) -> i0
            %5 = sv.array_index_inout %_RANDOM[%4] : !hw.inout<uarray<1xi32>>, i0
            sv.bpassign %5, %RANDOM : i32
            %6 = sv.array_index_inout %_RANDOM[%c0_i0] : !hw.inout<uarray<1xi32>>, i0
            %7 = sv.read_inout %6 : !hw.inout<i32>
            %8 = comb.extract %7 from 0 : (i32) -> i8
            sv.bpassign %counter, %8 : i8
          }
        }
        sv.ifdef  @FIRRTL_AFTER_INITIAL {
          sv.verbatim "`FIRRTL_AFTER_INITIAL"
        }
      }
    }
    hw.output %1 : i1
  }
  hw.module private @Flip(in %clock : i1, in %reset : i1, in %io_in : i1, out io_out : i1) attributes {emit.fragments = [@RANDOM_INIT_REG_FRAGMENT, @RANDOM_INIT_FRAGMENT]} {
    %c0_i0 = hw.constant 0 : i0
    %false = hw.constant false
    %reg = sv.reg {sv.namehint = "reg"} : !hw.inout<i1> 
    %0 = sv.read_inout %reg : !hw.inout<i1>
    %1 = comb.xor %io_in, %0 : i1
    sv.always posedge %clock {
      sv.if %reset {
        sv.passign %reg, %false : i1
      } else {
        sv.passign %reg, %1 : i1
      }
    }
    sv.ifdef  @ENABLE_INITIAL_REG_ {
      sv.ordered {
        sv.ifdef  @FIRRTL_BEFORE_INITIAL {
          sv.verbatim "`FIRRTL_BEFORE_INITIAL"
        }
        sv.initial {
          sv.ifdef.procedural  @INIT_RANDOM_PROLOG_ {
            sv.verbatim "`INIT_RANDOM_PROLOG_"
          }
          sv.ifdef.procedural  @RANDOMIZE_REG_INIT {
            %_RANDOM = sv.logic : !hw.inout<uarray<1xi32>>
            %RANDOM = sv.macro.ref.expr.se @RANDOM() : () -> i32
            %2 = comb.extract %false from 0 : (i1) -> i0
            %3 = sv.array_index_inout %_RANDOM[%2] : !hw.inout<uarray<1xi32>>, i0
            sv.bpassign %3, %RANDOM : i32
            %4 = sv.array_index_inout %_RANDOM[%c0_i0] : !hw.inout<uarray<1xi32>>, i0
            %5 = sv.read_inout %4 : !hw.inout<i32>
            %6 = comb.extract %5 from 0 : (i32) -> i1
            sv.bpassign %reg, %6 : i1
          }
        }
        sv.ifdef  @FIRRTL_AFTER_INITIAL {
          sv.verbatim "`FIRRTL_AFTER_INITIAL"
        }
      }
    }
    hw.output %0 : i1
  }
  hw.module @LedBlink(in %clock : i1, in %reset : i1, out io_out : i1) {
    %counterInst.io_full = hw.instance "counterInst" @Counter(clock: %clock: i1, reset: %reset: i1) -> (io_full: i1) {sv.namehint = "flipInst.io_in"}
    %flipInst.io_out = hw.instance "flipInst" @Flip(clock: %clock: i1, reset: %reset: i1, io_in: %counterInst.io_full: i1) -> (io_out: i1) {sv.namehint = "flipInst.io_out"}
    hw.output %flipInst.io_out : i1
  }
  om.class @LedBlink_Class(%basepath: !om.basepath) {
    om.class.fields
  }
}
